#pragma warning(disable : 4996)
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

/*
after cutting, each has len a b or c
after cutting, number of ribbon pieces = max.
*/
const int MAX = 4010;
int dp[MAX];
int val[3];
bool valid[MAX];

	int n, a, b, c;
	// memset(dp, 1, sizeof(dp));
	for (int i = 0; i < MAX; i++) dp[i] = -1;
	memset(valid, true, sizeof(valid));
	scanf("%d %d %d %d", &n, &a, &b, &c);
	val[0] = a; val[1] = b; val[2] = c; // haha	
	sort(val, val + 3);
	int min_val = val[0];
	int i = 0;
	/*
	for (; i < min_val; i++) {
		valid[i] = false;	// including 0 is false.
	}
	*/
	dp[0] = 0; // do this instead
	// other's code haven't check the validity of patterns...
	// but the problem states that at least one pattern could be found
	// so, I can kinda skip the validity check I guess.
	for (; i <= n; i++) {
		// bool all_invalid = true;
		for (int j = 0; j < 3; j++) {	// check each of the 3 values.
			// if (valid[i - val[j]]) {
			if (i >= val[j]) {
				dp[i] = max(dp[i], dp[i - val[j]] + 1);	// at least you got this right...
				// all_invalid = false;
			}
			/*
			else if (val[j] == i) {
				all_invalid = false;
			}*/
		}
		/*
		if (all_invalid) {
			valid[i] = false;
		}
		*/
	}
	printf("%d\n", dp[n]);

// old code.